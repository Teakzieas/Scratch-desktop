#include <iostream>
#include <fstream>
#include <unistd.h>
#include <string.h>
#include <linux/i2c-dev.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <vector>

#define WIDTH 128
#define HEIGHT 64
#define PAGES (HEIGHT / 8)

#define CMD_MODE 0x00
#define DATA_MODE 0x40

// I2C Device address
#define OLED_ADDR 0x3C

// Initialization commands for OLED
const std::vector<uint8_t> INIT_CMDS = {
    0xAE, 0xD5, 0x80, 0xA8, 0x3F, 0xD3, 0x00, 0x40, 0x8D, 0x14,
    0x20, 0x00, 0xA1, 0xC8, 0xDA, 0x12, 0x81, 0xCF, 0xD9, 0xF1,
    0xDB, 0x40, 0xA4, 0xA6, 0xAF
};

// Font data (example, truncated for brevity)
const std::vector<uint8_t> fontData = {
    0x00, 0x00, 0x00, 0x00, 0x00, // (space)
    0x00, 0x00, 0x5F, 0x00, 0x00, // !
    0x00, 0x07, 0x00, 0x07, 0x00, // "
    0x14, 0x7F, 0x14, 0x7F, 0x14, // #
    0x24, 0x2A, 0x7F, 0x2A, 0x12, // $
    0x23, 0x13, 0x08, 0x64, 0x62, // %
    0x36, 0x49, 0x55, 0x22, 0x50, // &
    0x00, 0x05, 0x03, 0x00, 0x00, // '
    0x00, 0x1C, 0x22, 0x41, 0x00, // (
    0x00, 0x41, 0x22, 0x1C, 0x00, // )
    0x08, 0x2A, 0x1C, 0x2A, 0x08, // *
    0x08, 0x08, 0x3E, 0x08, 0x08, // +
    0x00, 0x50, 0x30, 0x00, 0x00, // ,
    0x08, 0x08, 0x08, 0x08, 0x08, // -
    0x00, 0x60, 0x60, 0x00, 0x00, // .
    0x20, 0x10, 0x08, 0x04, 0x02, // /
    0x3E, 0x51, 0x49, 0x45, 0x3E, // 0
    0x00, 0x42, 0x7F, 0x40, 0x00, // 1
    0x42, 0x61, 0x51, 0x49, 0x46, // 2
    0x21, 0x41, 0x45, 0x4B, 0x31, // 3
    0x18, 0x14, 0x12, 0x7F, 0x10, // 4
    0x27, 0x45, 0x45, 0x45, 0x39, // 5
    0x3C, 0x4A, 0x49, 0x49, 0x30, // 6
    0x01, 0x71, 0x09, 0x05, 0x03, // 7
    0x36, 0x49, 0x49, 0x49, 0x36, // 8
    0x06, 0x49, 0x49, 0x29, 0x1E, // 9
    0x00, 0x36, 0x36, 0x00, 0x00, // :
    0x00, 0x56, 0x36, 0x00, 0x00, // ;
    0x00, 0x08, 0x14, 0x22, 0x41, // <
    0x14, 0x14, 0x14, 0x14, 0x14, // =
    0x41, 0x22, 0x14, 0x08, 0x00, // >
    0x02, 0x01, 0x51, 0x09, 0x06, // ?
    0x32, 0x49, 0x79, 0x41, 0x3E, // @
    0x7E, 0x11, 0x11, 0x11, 0x7E, // A
    0x7F, 0x49, 0x49, 0x49, 0x36, // B
    0x3E, 0x41, 0x41, 0x41, 0x22, // C
    0x7F, 0x41, 0x41, 0x22, 0x1C, // D
    0x7F, 0x49, 0x49, 0x49, 0x41, // E
    0x7F, 0x09, 0x09, 0x01, 0x01, // F
    0x3E, 0x41, 0x41, 0x51, 0x32, // G
    0x7F, 0x08, 0x08, 0x08, 0x7F, // H
    0x00, 0x41, 0x7F, 0x41, 0x00, // I
    0x20, 0x40, 0x41, 0x3F, 0x01, // J
    0x7F, 0x08, 0x14, 0x22, 0x41, // K
    0x7F, 0x40, 0x40, 0x40, 0x40, // L
    0x7F, 0x02, 0x04, 0x02, 0x7F, // M
    0x7F, 0x04, 0x08, 0x10, 0x7F, // N
    0x3E, 0x41, 0x41, 0x41, 0x3E, // O
    0x7F, 0x09, 0x09, 0x09, 0x06, // P
    0x3E, 0x41, 0x51, 0x21, 0x5E, // Q
    0x7F, 0x09, 0x19, 0x29, 0x46, // R
    0x46, 0x49, 0x49, 0x49, 0x31, // S
    0x01, 0x01, 0x7F, 0x01, 0x01, // T
    0x3F, 0x40, 0x40, 0x40, 0x3F, // U
    0x1F, 0x20, 0x40, 0x20, 0x1F, // V
    0x7F, 0x20, 0x18, 0x20, 0x7F, // W
    0x63, 0x14, 0x08, 0x14, 0x63, // X
    0x03, 0x04, 0x78, 0x04, 0x03, // Y
    0x61, 0x51, 0x49, 0x45, 0x43, // Z
    0x00, 0x00, 0x7F, 0x41, 0x41, // [
    0x02, 0x04, 0x08, 0x10, 0x20, // "\"
    0x41, 0x41, 0x7F, 0x00, 0x00, // ]
    0x04, 0x02, 0x01, 0x02, 0x04, // ^
    0x40, 0x40, 0x40, 0x40, 0x40, // _
    0x00, 0x01, 0x02, 0x04, 0x00, // `
    0x20, 0x54, 0x54, 0x54, 0x78, // a
    0x7F, 0x48, 0x44, 0x44, 0x38, // b
    0x38, 0x44, 0x44, 0x44, 0x20, // c
    0x38, 0x44, 0x44, 0x48, 0x7F, // d
    0x38, 0x54, 0x54, 0x54, 0x18, // e
    0x08, 0x7E, 0x09, 0x01, 0x02, // f
    0x08, 0x14, 0x54, 0x54, 0x3C, // g
    0x7F, 0x08, 0x04, 0x04, 0x78, // h
    0x00, 0x44, 0x7D, 0x40, 0x00, // i
    0x20, 0x40, 0x44, 0x3D, 0x00, // j
    0x00, 0x7F, 0x10, 0x28, 0x44, // k
    0x00, 0x41, 0x7F, 0x40, 0x00, // l
    0x7C, 0x04, 0x18, 0x04, 0x78, // m
    0x7C, 0x08, 0x04, 0x04, 0x78, // n
    0x38, 0x44, 0x44, 0x44, 0x38, // o
    0x7C, 0x14, 0x14, 0x14, 0x08, // p
    0x08, 0x14, 0x14, 0x18, 0x7C, // q
    0x7C, 0x08, 0x04, 0x04, 0x08, // r
    0x48, 0x54, 0x54, 0x54, 0x20, // s
    0x04, 0x3F, 0x44, 0x40, 0x20, // t
    0x3C, 0x40, 0x40, 0x20, 0x7C, // u
    0x1C, 0x20, 0x40, 0x20, 0x1C, // v
    0x3C, 0x40, 0x30, 0x40, 0x3C, // w
    0x44, 0x28, 0x10, 0x28, 0x44, // x
    0x0C, 0x50, 0x50, 0x50, 0x3C, // y
    0x44, 0x64, 0x54, 0x4C, 0x44 // z

};


// Function to open the I2C device
int openI2C(const std::string& device) {
    int file = open(device.c_str(), O_RDWR);
    if (file < 0) {
        std::cerr << "Failed to open I2C device" << std::endl;
        exit(1);
    }
    return file;
}

// Function to communicate with the OLED
void sendCommand(int file, uint8_t cmd) {
    uint8_t buffer[] = { CMD_MODE, cmd };
    if (write(file, buffer, sizeof(buffer)) != sizeof(buffer)) {
        std::cerr << "Failed to send command" << std::endl;
        exit(1);
    }
}

void sendData(int file, const std::vector<uint8_t>& data) {
    std::vector<uint8_t> buffer = { DATA_MODE };
    buffer.insert(buffer.end(), data.begin(), data.end());
    if (write(file, buffer.data(), buffer.size()) != buffer.size()) {
        std::cerr << "Failed to send data" << std::endl;
        exit(1);
    }
}

void initOLED(int file) {
    for (const auto& cmd : INIT_CMDS) {
        sendCommand(file, cmd);
    }
}

std::vector<unsigned char> getGlyph(char c) {
    // Assuming 'c' maps directly to an index starting from some base character, e.g., ASCII value
    int index = c - ' ';

    if (index < 0 || index >= (fontData.size() / 5)) {
        std::cerr << "Character not found in font data: " << c << std::endl;
        return std::vector<unsigned char>(5, 0x00);  // Return an empty glyph
    }

    std::vector<unsigned char> glyph(fontData.begin() + index * 5, fontData.begin() + (index + 1) * 5);
    return glyph;
}

void drawText(int file, const std::string& text, int row) {
    int page = row * 2 - 2;
    int column = 0;
    const int maxColumns = WIDTH;

    for (char c : text) {
        auto glyph = getGlyph(c);

        std::vector<std::vector<uint8_t>> scaledGlyphs(2, std::vector<uint8_t>());

        for (auto& item : glyph) {
            std::string scaledBinary = "";
            
            for (int i = 0; i < 8; ++i) {
                scaledBinary += std::string(2, (item & (1 << (7 - i))) ? '1' : '0');
            }

            for (int i = 0; i < 2; ++i) {
                scaledGlyphs[i].push_back(std::stoi(scaledBinary.substr(i * 8, 8), nullptr, 2));
            }
        }
        
        std::vector<std::vector<uint8_t>> thickenedGlyphs;
        
        for (const auto& row : scaledGlyphs) {
            std::vector<uint8_t> thickenedRow;
            for (auto value : row) {
                // Duplicate each value to make the row twice as thick
                thickenedRow.push_back(value);
                thickenedRow.push_back(value);
            }
            thickenedGlyphs.push_back(thickenedRow);
        }       

        for (int i = 0; i < 2; ++i) {
            sendCommand(file, 0xB0 + page + i);
            sendCommand(file, 0x00 + (column & 0x0F));
            sendCommand(file, 0x10 + (column >> 4));
            sendData(file, thickenedGlyphs[1 - i]);
        }

        column += 12;  // Move to the next character
    }
}

void addText(int file, const std::string& text, int row) {
    std::string truncatedText;
    if (text.size() > 10) {
        truncatedText = text.substr(0, 8) + "..";
    } else {
        truncatedText = text + std::string(10 - text.size(), ' ');
    }

    drawText(file, truncatedText, row);
}

int OLEDClear(int row) {
    std::string device = "/dev/i2c-1";  // Path to the I2C device
    int file = openI2C(device);

    if (ioctl(file, I2C_SLAVE, OLED_ADDR) < 0) {
        std::cerr << "Failed to set I2C address" << std::endl;
        return -1;
    }
    
    if (row == 5) {
        for (int i = 0; i < 9; ++i) {
            sendCommand(file, 0xB0 + i);
            sendCommand(file, 0x00);
            sendCommand(file, 0x10);
            for (int j = 0; j < 128; ++j) {
                sendData(file, {0x00});
            }
        }
    } else {
        addText(file, "          ", row);
    }
    close(file);
    return 0;
}

int OLEDInit(){
    std::string device = "/dev/i2c-1";  // Path to the I2C device
    int file = openI2C(device);

    if (ioctl(file, I2C_SLAVE, OLED_ADDR) < 0) {
        std::cerr << "Failed to set I2C address" << std::endl;
        return -1;
    }
    initOLED(file);
    OLEDClear(5);
    close(file);
    return 0;
}

int OLEDText(const std::string& text,int row) {
    std::string device = "/dev/i2c-1";  // Path to the I2C device
    int file = openI2C(device);

    if (ioctl(file, I2C_SLAVE, OLED_ADDR) < 0) {
        std::cerr << "Failed to set I2C address" << std::endl;
        return -1;
    }
    
    addText(file, text, row);
    close(file);
    return 0;
}
